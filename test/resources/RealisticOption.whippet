type Option a = Some a | None

signature Option {
  let get : a -> Option a -> a
  let some? : Option a -> Bool
  let none? : Option a -> Bool
  let map : (a -> b) -> Option a -> Option b
  let flatMap : (a -> Option b) -> Option a -> Option b
}

module Option {

  let get d = fn {
    | Some x -> x
    | None   -> d
  }

  let some? = fn {
    | Some _ -> True
    | None   -> False
  }

  let none? = fn {
    | Some _ -> False
    | None   -> True
  }

  let map f = fn {
    | Some x -> Some (f x)
    | None   -> None
  }

  let flatMap f = fn {
    | Some x -> f x
    | None   -> None
  }

}
